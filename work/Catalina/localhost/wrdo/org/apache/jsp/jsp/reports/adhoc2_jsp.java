/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-11-20 13:04:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.reports;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.io.*;
import java.text.*;
import java.util.*;
import com.locationDao;
import com.locationBean;
import com.ConnectionProvider;
import java.sql.*;

public final class adhoc2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


Connection con=null;
ResultSet rs=null;
Statement stmt=null;
String query="";
ResultSetMetaData md;
String rep_title="";
String repquery="";
PreparedStatement pst = null;

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(10);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("com.locationDao");
    _jspx_imports_classes.add("com.locationBean");
    _jspx_imports_classes.add("com.ConnectionProvider");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--  Adhoc2.jsp needs 2 inputs String1,String2 in the Query  -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      com.locationBean obj = null;
      obj = (com.locationBean) _jspx_page_context.getAttribute("obj", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (obj == null){
        obj = new com.locationBean();
        _jspx_page_context.setAttribute("obj", obj, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("obj"), request);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function param1(){\r\n");
      out.write("	var id = document.getElementById(\"id\").value\r\n");
      out.write("	var vid1 = document.getElementById(\"state\").value\r\n");
      out.write("	window.location.replace(\"adhoc2.jsp?id=\"+id+\"&&value1=\"+vid1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function param2(){\r\n");
      out.write("	var id = document.getElementById(\"id\").value\r\n");
      out.write("	var vid1 = document.getElementById(\"state\").value\r\n");
      out.write("	var vid2 = document.getElementById(\"district\").value\r\n");
      out.write("	window.location.replace(\"adhoc2.jsp?id=\"+id+\"&&value1=\"+vid1+\"&&value2=\"+vid2);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");

locationDao location = new locationDao();

con = ConnectionProvider.getCon();
stmt=con.createStatement();

String id=request.getParameter("id");
String value1=request.getParameter("value1");
String value2=request.getParameter("value2");
if (id==null){id="0";}
if (value1==null){value1="0";}
if (value2==null){value2="0";}


if (!id.equalsIgnoreCase("0")){
	query="select * from reports where rep_id="+id;
	rs = stmt.executeQuery(query);
	while(rs.next()){
	rep_title=rs.getString("rep_title");
	repquery=rs.getString("rep_query");
					}
							}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link href=\"../../styles/text.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"../../Script/datepicker.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<input type=\"hidden\" id=\"id\" name=\"id\" value=");
      out.print(id);
      out.write(" >\r\n");
      out.write(" \r\n");
      out.write("<table>\r\n");
      out.write("	<tr><td  colspan=\"2\" class=\"Headings\" align=\"left\" width=\"100%\" >");
      out.print(rep_title );
      out.write("</td></tr>\r\n");
      out.write("	<tr><td valign=\"top\">\r\n");
      out.write("		<table width=\"10%\" class=\"border\">\r\n");
      out.write("				<tr><td class=\"content style1\"><b> State </b></td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<select id=\"state\" name=\"state\" onchange=\"param1()\" class=\"content style1\">\r\n");
      out.write("						<option value=\"0\">--Please Select--</option>\r\n");
      out.write("						");
 
						List<locationBean> list1 =location.viewStates();
						Iterator<locationBean> S = list1.iterator(); 
						while (S.hasNext()) {
						obj = (locationBean)S.next();
						
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(obj.getStateid());
      out.write('"');
      out.write('>');
      out.print(obj.getSname());
      out.write("</option>\r\n");
      out.write("						");
 if(obj.getStateid()==Integer.parseInt(value1)){
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(value1);
      out.write("\" selected >");
      out.print(obj.getSname());
      out.write("</option> \r\n");
      out.write("						");
} 
								}
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr><td class=\"content style1\"><b> District</b> </td>\r\n");
      out.write("				<td>\r\n");
      out.write("					<select id=\"district\" name=\"district\" onchange=\"param2()\" class=\"content style1\">\r\n");
      out.write("							<option value=\"0\">--Please Select--</option>\r\n");
      out.write("							");
 
							List<locationBean> list2 =location.viewDistrict(Integer.parseInt(value1));
							Iterator<locationBean> D = list2.iterator(); 
							while (D.hasNext()) {
							obj = (locationBean)D.next();
							
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(obj.getDistrict_id());
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(obj.getDname());
      out.write("</option>\r\n");
      out.write("							");
 if(obj.getDistrict_id()==Integer.parseInt(value2)){
      out.write("\r\n");
      out.write("							<option value=\"");
      out.print(value2);
      out.write("\" selected >");
      out.print(obj.getDname());
      out.write("</option>\r\n");
      out.write("							");
}
									}
      out.write("\r\n");
      out.write("				\r\n");
      out.write("					</select>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr> \r\n");
      out.write("		</table>\r\n");
      out.write("	</td>\r\n");
      out.write("	<td valign=top>\r\n");
      out.write("	<table width=\"100%\" id=\"stretch\" class=\"border\"  border=\"1\" cellspacing=\"0\">\r\n");
      out.write("	");



try {
pst = con.prepareStatement(repquery); 
pst.setString(1,value1);
pst.setString(2,value2);
rs = pst.executeQuery();

}
catch (Exception e) {
		out.println ("<tr class=red><td colspan=2>Oh oops - check your SQL\n -"+repquery+"  - "+e+"</td></tr>");
                }



md = rs.getMetaData();
int count = md.getColumnCount();
//out.println(count);


      out.write("\r\n");
      out.write("<tr class=\"Blue-content\">\r\n");

for (int i=1; i<=count; i++) {
	out.print("<td>");
	out.print(md.getColumnName(i).toUpperCase());
	out.print("</td>");
	}
out.println("</tr>");

while(rs.next()){

      out.write("\r\n");
      out.write("<tr  class=\"readonly\">\r\n");
	for (int i=1; i<=count; i++) {
		out.print("<td>");
		out.print(rs.getString(i));
		out.print("</td>");
	}
	out.println("</tr>");
}



      out.write("\r\n");
      out.write("\r\n");
      out.write("</tr></table>\r\n");
      out.write("</td></tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");

rs.close();

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
