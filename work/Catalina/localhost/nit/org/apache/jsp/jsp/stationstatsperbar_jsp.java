/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-09-26 05:01:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.ConnectionProvider;
import java.io.*;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.ChartUtilities;
import java.awt.*;
import org.jfree.chart.*;
import org.jfree.chart.entity.*;
import org.jfree.data.general.*;
import org.jfree.data.category.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

public final class stationstatsperbar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


Connection con=null;
ResultSet rs=null;
Statement stmt=null;
String query="";

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(14);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("java.awt");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.jfree.data.category");
    _jspx_imports_packages.add("org.jfree.data.general");
    _jspx_imports_packages.add("org.jfree.chart");
    _jspx_imports_packages.add("org.jfree.chart.entity");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(19);
    _jspx_imports_classes.add("org.jfree.chart.renderer.xy.XYLineAndShapeRenderer");
    _jspx_imports_classes.add("org.jfree.ui.ApplicationFrame");
    _jspx_imports_classes.add("org.jfree.chart.plot.XYPlot");
    _jspx_imports_classes.add("org.jfree.chart.plot.PlotOrientation");
    _jspx_imports_classes.add("com.ConnectionProvider");
    _jspx_imports_classes.add("org.jfree.chart.axis.NumberAxis");
    _jspx_imports_classes.add("org.jfree.chart.ChartFactory");
    _jspx_imports_classes.add("org.jfree.ui.RefineryUtilities");
    _jspx_imports_classes.add("org.jfree.data.xy.XYDataset");
    _jspx_imports_classes.add("org.jfree.data.xy.XYSeries");
    _jspx_imports_classes.add("org.jfree.chart.JFreeChart");
    _jspx_imports_classes.add("org.jfree.chart.ChartUtilities");
    _jspx_imports_classes.add("org.jfree.chart.ChartPanel");
    _jspx_imports_classes.add("org.jfree.data.xy.XYSeriesCollection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write(" \n");
      out.write("\n");
      out.write("  \n");
      out.write("  \n");
      out.write("  \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- Sesssion Management -->\n");
if(null == session.getAttribute("theName")){  
  // User is not logged in.
  out.println("your Session has expired");
  response.sendRedirect("../index.html?invalid=0");
}

      out.write("\n");
      out.write("<!-- End of Sesssion Management -->\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<TITLE> Station Statistics </TITLE>\n");
      out.write("<link href=\"../styles/text.css\" rel=\"stylesheet\" type=\"text/css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");

con = ConnectionProvider.getCon();
stmt=con.createStatement();

query="select count(1) as Total,sum(case when percent is null then 1 else 0 end) as Norep,";
query+="sum(case when percent >=100 then 1 else 0  end) reporting100,";
query+="sum(case when percent >90 and percent<100 then 1 else 0 end)as reporting90,";
query+="sum(case when percent >80 and percent <=90 then 1 end)as reporting80,";
query+="sum(case when percent >70 and percent <=80 then 1 else 0 end)as reporting70, ";
query+="sum(case when percent >60 and percent <=70 then 1 else 0 end)as reporting60, ";
query+="sum(case when percent >50 and percent <=60 then 1 else 0 end)as reporting50, ";
query+="sum(case when percent <=50  then 1 else 0 end)as rep50less ";
query+="from (select st.clientid, st.datafreq,packet_count,minutes,minutes/st.datafreq,cast(packet_count*100/(minutes/st.datafreq) as integer) as Percent  ";
query+="from station_configs_det as st left outer join (select clientid,count(distinct (to_Char(packet_date,'YYYYMMDD HH24'))) as packet_count,";
query+="((EXTRACT(epoch FROM CURRENT_TIMESTAMP)-EXTRACT(epoch FROM CURRENT_TIMESTAMP - Interval '1 DAY'))/60) as minutes from data_packets  ";
query+="where packet_date >= CURRENT_TIMESTAMP - Interval '1 DAY' group by clientid) as a ";
query+="on (st.clientid=a.clientid) where st.activate!=0) as x";


rs=stmt.executeQuery(query);
Integer vTotal=0;
Integer vNorep=0;
Integer v100=0;
Integer v90=0;
Integer v80=0;
Integer v70=0;
Integer v60=0;
Integer v50=0;
Integer v40=0;


int DisRow=0;
while(rs.next()){ 
	vTotal=rs.getInt(1);
	vNorep=rs.getInt(2) ;
	v100= rs.getInt(3) ;
	v90= rs.getInt(4) ;
	v80= rs.getInt(5) ;
	v70= rs.getInt(6) ;
    v60= rs.getInt(7) ;
    v50= rs.getInt(8) ;
    v40= rs.getInt(9) ;

	DisRow++;
	}

      out.write('\n');
      out.write('\n');
  
 try 
 {  
 File image = File.createTempFile("image", "tmp");
final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
dataset.addValue(v100, "100%+", "");
dataset.addValue(v90, "90-100%", "");
dataset.addValue(v80, "80-90%", "");
dataset.addValue(v70, "70-80%", "");
dataset.addValue(v60, "60-70%", "");
dataset.addValue(v50, "50-60%", "");
dataset.addValue(v40, "<50%", "");
dataset.addValue(vNorep, "Not Working", "");
JFreeChart chart = ChartFactory.createBarChart3D("", "Working", "Stations", dataset, PlotOrientation.VERTICAL,true, true, false);

 //
 ChartUtilities.saveChartAsPNG(image, chart, 300, 280);  

 FileInputStream fileInStream = new FileInputStream(image);  
 OutputStream outStream = response.getOutputStream();     

 long fileLength;  
 byte[] byteStream;  

 fileLength = image.length();  
 byteStream = new byte[(int)fileLength];  
 fileInStream.read(byteStream, 0, (int)fileLength);  

 response.setContentType("image/png");  
 response.setContentLength((int)fileLength);  
 response.setHeader("Cache-Control", "no-store,no-cache, must-revalidate, post-check=0, pre-check=0");  
 response.setHeader("Pragma", "no-cache");  

 fileInStream.close();  
 outStream.write(byteStream);  
 outStream.flush();  
 outStream.close();  
 }  
 catch (IOException e)  
 {  
 System.err.println("Problem occurred creating chart.");  
 }  

   


      out.write(" \n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
